# Generated by Haxe 3.4.7
# coding: utf-8

import math as python_lib_Math
import math as Math
from os import path as python_lib_os_Path
import inspect as python_lib_Inspect
import os as python_lib_Os
import glob as python_lib_Glob
import functools as python_lib_Functools
try:
    import msvcrt as python_lib_Msvcrt
except:
    pass
import random as python_lib_Random
import subprocess as python_lib_Subprocess
import sys as python_lib_Sys
try:
    import termios as python_lib_Termios
except:
    pass
import time as python_lib_Time
import timeit as python_lib_Timeit
try:
    import tty as python_lib_Tty
except:
    pass
from io import BufferedReader as python_lib_io_BufferedReader
from io import BufferedWriter as python_lib_io_BufferedWriter
from io import TextIOWrapper as python_lib_io_TextIOWrapper
from subprocess import Popen as python_lib_subprocess_Popen


class _hx_AnonObject:
    def __init__(self, fields):
        self.__dict__ = fields


class Enum:
    _hx_class_name = "Enum"
    __slots__ = ("tag", "index", "params")
    _hx_fields = ["tag", "index", "params"]
    _hx_methods = ["__str__"]

    def __init__(self,tag,index,params):
        # /home/istvan/packages/haxe/std/python/internal/EnumImpl.hx:38
        self.tag = tag
        # /home/istvan/packages/haxe/std/python/internal/EnumImpl.hx:39
        self.index = index
        # /home/istvan/packages/haxe/std/python/internal/EnumImpl.hx:40
        self.params = params

    def __str__(self):
        # /home/istvan/packages/haxe/std/python/internal/EnumImpl.hx:45
        if (self.params is None):
            return self.tag
        else:
            # /home/istvan/packages/haxe/std/python/internal/EnumImpl.hx:48
            _this = self.params
            return (((HxOverrides.stringOrNull(self.tag) + "(") + HxOverrides.stringOrNull(",".join([python_Boot.toString1(x1,'') for x1 in _this]))) + ")")



class EnumValue:
    _hx_class_name = "EnumValue"


class Main:
    _hx_class_name = "Main"
    __slots__ = ()
    _hx_statics = ["main"]

    @staticmethod
    def main():
        # Main.hx:12
        print("Hello World!")


class Reflect:
    _hx_class_name = "Reflect"
    __slots__ = ()
    _hx_statics = ["field", "setField"]

    @staticmethod
    def field(o,field):
        # /home/istvan/packages/haxe/std/python/_std/Reflect.hx:44
        return python_Boot.field(o,field)

    @staticmethod
    def setField(o,field,value):
        # /home/istvan/packages/haxe/std/python/_std/Reflect.hx:49
        setattr(o,(("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field)),value)


class Std:
    _hx_class_name = "Std"
    __slots__ = ()
    _hx_statics = ["string"]

    @staticmethod
    def string(s):
        # /home/istvan/packages/haxe/std/python/_std/Std.hx:134
        return python_Boot.toString1(s,"")


class StringTools:
    _hx_class_name = "StringTools"
    __slots__ = ()
    _hx_statics = ["startsWith"]

    @staticmethod
    def startsWith(s,start):
        # /home/istvan/packages/haxe/std/StringTools.hx:200
        if (len(s) >= len(start)):
            return (HxString.substr(s,0,len(start)) == start)
        else:
            return False


class sys_FileSystem:
    _hx_class_name = "sys.FileSystem"
    __slots__ = ()
    _hx_statics = ["fullPath"]

    @staticmethod
    def fullPath(relPath):
        # /home/istvan/packages/haxe/std/python/_std/sys/FileSystem.hx:56
        return python_lib_os_Path.realpath(relPath)


class haxe_IMap:
    _hx_class_name = "haxe.IMap"
    __slots__ = ()


class haxe_ds_StringMap:
    _hx_class_name = "haxe.ds.StringMap"
    __slots__ = ("h",)
    _hx_fields = ["h"]

    def __init__(self):
        # /home/istvan/packages/haxe/std/python/_std/haxe/ds/StringMap.hx:32
        self.h = dict()



class python_HaxeIterator:
    _hx_class_name = "python.HaxeIterator"
    __slots__ = ("it", "x", "has", "checked")
    _hx_fields = ["it", "x", "has", "checked"]
    _hx_methods = ["next", "hasNext"]

    def __init__(self,it):
        # /home/istvan/packages/haxe/std/python/HaxeIterator.hx:31
        self.checked = False
        # /home/istvan/packages/haxe/std/python/HaxeIterator.hx:30
        self.has = False
        # /home/istvan/packages/haxe/std/python/HaxeIterator.hx:29
        self.x = None
        # /home/istvan/packages/haxe/std/python/HaxeIterator.hx:34
        self.it = it

    def next(self):
        # /home/istvan/packages/haxe/std/python/HaxeIterator.hx:38
        if (not self.checked):
            self.hasNext()
        # /home/istvan/packages/haxe/std/python/HaxeIterator.hx:39
        self.checked = False
        # /home/istvan/packages/haxe/std/python/HaxeIterator.hx:40
        return self.x

    def hasNext(self):
        # /home/istvan/packages/haxe/std/python/HaxeIterator.hx:44
        if (not self.checked):
            # /home/istvan/packages/haxe/std/python/HaxeIterator.hx:45
            try:
                # /home/istvan/packages/haxe/std/python/HaxeIterator.hx:46
                self.x = self.it.__next__()
                # /home/istvan/packages/haxe/std/python/HaxeIterator.hx:47
                self.has = True
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                if isinstance(_hx_e1, StopIteration):
                    s = _hx_e1
                    # /home/istvan/packages/haxe/std/python/HaxeIterator.hx:49
                    self.has = False
                    # /home/istvan/packages/haxe/std/python/HaxeIterator.hx:50
                    self.x = None
                else:
                    raise _hx_e
            # /home/istvan/packages/haxe/std/python/HaxeIterator.hx:52
            self.checked = True
        # /home/istvan/packages/haxe/std/python/HaxeIterator.hx:54
        return self.has



class Sys:
    _hx_class_name = "Sys"
    __slots__ = ()
    _hx_statics = ["environ", "time", "exit", "print", "println", "args", "getEnv", "putEnv", "environment", "sleep", "setTimeLocale", "getCwd", "setCwd", "systemName", "command", "cpuTime", "executablePath", "_programPath", "programPath", "getChar", "stdin", "stdout", "stderr"]

    @staticmethod
    def time():
        # /home/istvan/packages/haxe/std/python/_std/Sys.hx:42
        return python_lib_Time.time()

    @staticmethod
    def exit(code):
        # /home/istvan/packages/haxe/std/python/_std/Sys.hx:46
        python_lib_Sys.exit(code)

    @staticmethod
    def print(v):
        # /home/istvan/packages/haxe/std/python/_std/Sys.hx:50
        python_Lib.print(v)

    @staticmethod
    def println(v):
        # /home/istvan/packages/haxe/std/python/_std/Sys.hx:54
        python_Lib.println(v)

    @staticmethod
    def args():
        # /home/istvan/packages/haxe/std/python/_std/Sys.hx:58
        argv = python_lib_Sys.argv
        # /home/istvan/packages/haxe/std/python/_std/Sys.hx:59
        return argv[1:None]

    @staticmethod
    def getEnv(s):
        # /home/istvan/packages/haxe/std/python/_std/Sys.hx:63
        return Sys.environ.h.get(s,None)

    @staticmethod
    def putEnv(s,v):
        # /home/istvan/packages/haxe/std/python/_std/Sys.hx:67
        python_lib_Os.putenv(s,v)
        # /home/istvan/packages/haxe/std/python/_std/Sys.hx:68
        Sys.environ.h[s] = v

    @staticmethod
    def environment():
        # /home/istvan/packages/haxe/std/python/_std/Sys.hx:72
        return Sys.environ

    @staticmethod
    def sleep(seconds):
        # /home/istvan/packages/haxe/std/python/_std/Sys.hx:76
        python_lib_Time.sleep(seconds)

    @staticmethod
    def setTimeLocale(loc):
        # /home/istvan/packages/haxe/std/python/_std/Sys.hx:80
        return False

    @staticmethod
    def getCwd():
        # /home/istvan/packages/haxe/std/python/_std/Sys.hx:84
        return python_lib_Os.getcwd()

    @staticmethod
    def setCwd(s):
        # /home/istvan/packages/haxe/std/python/_std/Sys.hx:88
        python_lib_Os.chdir(s)

    @staticmethod
    def systemName():
        # /home/istvan/packages/haxe/std/python/_std/Sys.hx:92
        _g = python_lib_Sys.platform
        # /home/istvan/packages/haxe/std/python/_std/Sys.hx:93
        x = _g
        # /home/istvan/packages/haxe/std/python/_std/Sys.hx:92
        if StringTools.startsWith(x,"linux"):
            return "Linux"
        else:
            # /home/istvan/packages/haxe/std/python/_std/Sys.hx:92
            _g1 = _g
            _hx_local_0 = len(_g1)
            # /home/istvan/packages/haxe/std/python/_std/Sys.hx:96
            if (_hx_local_0 == 5):
                if (_g1 == "win32"):
                    return "Windows"
                else:
                    raise _HxException("not supported platform")
            elif (_hx_local_0 == 6):
                if (_g1 == "cygwin"):
                    return "Windows"
                elif (_g1 == "darwin"):
                    return "Mac"
                else:
                    raise _HxException("not supported platform")
            else:
                raise _HxException("not supported platform")

    @staticmethod
    def command(cmd,args = None):
        # /home/istvan/packages/haxe/std/python/_std/Sys.hx:104
        if (args is None):
            return python_lib_Subprocess.call(cmd,**python__KwArgs_KwArgs_Impl_.fromT(_hx_AnonObject({'shell': True})))
        else:
            return python_lib_Subprocess.call(([cmd] + args))

    @staticmethod
    def cpuTime():
        # /home/istvan/packages/haxe/std/python/_std/Sys.hx:111
        return python_lib_Timeit.default_timer()

    @staticmethod
    def executablePath():
        # /home/istvan/packages/haxe/std/python/_std/Sys.hx:115
        return python_internal_ArrayImpl._get(python_lib_Sys.argv, 0)

    @staticmethod
    def programPath():
        # /home/istvan/packages/haxe/std/python/_std/Sys.hx:121
        return Sys._programPath

    @staticmethod
    def getChar(echo):
        # /home/istvan/packages/haxe/std/python/_std/Sys.hx:126
        ch = None
        _g = Sys.systemName()
        _g1 = _g
        _hx_local_0 = len(_g1)
        # /home/istvan/packages/haxe/std/python/_std/Sys.hx:127
        if (_hx_local_0 == 5):
            if (_g1 == "Linux"):
                # /home/istvan/packages/haxe/std/python/_std/Sys.hx:128
                fd = python_lib_Sys.stdin.fileno()
                # /home/istvan/packages/haxe/std/python/_std/Sys.hx:129
                old = python_lib_Termios.tcgetattr(fd)
                # /home/istvan/packages/haxe/std/python/_std/Sys.hx:131
                def _hx_local_2(f,a1,a2,a3):
                    # /home/istvan/packages/haxe/std/python/_std/Sys.hx:131
                    def _hx_local_1():
                        # /home/istvan/packages/haxe/std/python/_std/Sys.hx:131
                        f(a1,a2,a3)
                    return _hx_local_1
                restore = _hx_local_2(python_lib_Termios.tcsetattr,fd,python_lib_Termios.TCSADRAIN,old)
                # /home/istvan/packages/haxe/std/python/_std/Sys.hx:133
                try:
                    # /home/istvan/packages/haxe/std/python/_std/Sys.hx:134
                    python_lib_Tty.setraw(fd)
                    # /home/istvan/packages/haxe/std/python/_std/Sys.hx:135
                    x = python_lib_Sys.stdin.read(1)
                    # /home/istvan/packages/haxe/std/python/_std/Sys.hx:136
                    restore()
                    # /home/istvan/packages/haxe/std/python/_std/Sys.hx:126
                    ch = HxString.charCodeAt(x,0)
                except Exception as _hx_e:
                    _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                    e = _hx_e1
                    # /home/istvan/packages/haxe/std/python/_std/Sys.hx:139
                    restore()
                    # /home/istvan/packages/haxe/std/python/_std/Sys.hx:140
                    raise _HxException(e)
            else:
                # /home/istvan/packages/haxe/std/python/_std/Sys.hx:145
                x1 = _g
                # /home/istvan/packages/haxe/std/python/_std/Sys.hx:146
                raise _HxException((("platform " + ("null" if x1 is None else x1)) + " not supported"))
        elif (_hx_local_0 == 3):
            if (_g1 == "Mac"):
                # /home/istvan/packages/haxe/std/python/_std/Sys.hx:128
                fd = python_lib_Sys.stdin.fileno()
                # /home/istvan/packages/haxe/std/python/_std/Sys.hx:129
                old = python_lib_Termios.tcgetattr(fd)
                # /home/istvan/packages/haxe/std/python/_std/Sys.hx:131
                def _hx_local_4(f,a1,a2,a3):
                    # /home/istvan/packages/haxe/std/python/_std/Sys.hx:131
                    def _hx_local_3():
                        # /home/istvan/packages/haxe/std/python/_std/Sys.hx:131
                        f(a1,a2,a3)
                    return _hx_local_3
                restore = _hx_local_4(python_lib_Termios.tcsetattr,fd,python_lib_Termios.TCSADRAIN,old)
                # /home/istvan/packages/haxe/std/python/_std/Sys.hx:133
                try:
                    # /home/istvan/packages/haxe/std/python/_std/Sys.hx:134
                    python_lib_Tty.setraw(fd)
                    # /home/istvan/packages/haxe/std/python/_std/Sys.hx:135
                    x = python_lib_Sys.stdin.read(1)
                    # /home/istvan/packages/haxe/std/python/_std/Sys.hx:136
                    restore()
                    # /home/istvan/packages/haxe/std/python/_std/Sys.hx:126
                    ch = HxString.charCodeAt(x,0)
                except Exception as _hx_e:
                    _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                    e = _hx_e1
                    # /home/istvan/packages/haxe/std/python/_std/Sys.hx:139
                    restore()
                    # /home/istvan/packages/haxe/std/python/_std/Sys.hx:140
                    raise _HxException(e)
            else:
                # /home/istvan/packages/haxe/std/python/_std/Sys.hx:145
                x1 = _g
                # /home/istvan/packages/haxe/std/python/_std/Sys.hx:146
                raise _HxException((("platform " + ("null" if x1 is None else x1)) + " not supported"))
        elif (_hx_local_0 == 7):
            if (_g1 == "Windows"):
                ch = HxString.charCodeAt(python_lib_Msvcrt.getch().decode("utf-8"),0)
            else:
                # /home/istvan/packages/haxe/std/python/_std/Sys.hx:145
                x1 = _g
                # /home/istvan/packages/haxe/std/python/_std/Sys.hx:146
                raise _HxException((("platform " + ("null" if x1 is None else x1)) + " not supported"))
        else:
            # /home/istvan/packages/haxe/std/python/_std/Sys.hx:145
            x1 = _g
            # /home/istvan/packages/haxe/std/python/_std/Sys.hx:146
            raise _HxException((("platform " + ("null" if x1 is None else x1)) + " not supported"))
        # /home/istvan/packages/haxe/std/python/_std/Sys.hx:148
        if echo:
            python_Lib.print("".join(map(chr,[ch])))
        # /home/istvan/packages/haxe/std/python/_std/Sys.hx:151
        return ch

    @staticmethod
    def stdin():
        # /home/istvan/packages/haxe/std/python/_std/Sys.hx:155
        return python_io_IoTools.createFileInputFromText(python_lib_Sys.stdin)

    @staticmethod
    def stdout():
        # /home/istvan/packages/haxe/std/python/_std/Sys.hx:159
        return python_io_IoTools.createFileOutputFromText(python_lib_Sys.stdout)

    @staticmethod
    def stderr():
        # /home/istvan/packages/haxe/std/python/_std/Sys.hx:163
        return python_io_IoTools.createFileOutputFromText(python_lib_Sys.stderr)


class gamma__Common_Settings:
    _hx_class_name = "gamma._Common.Settings"
    __slots__ = ("ras_ext", "path", "modules", "libpaths", "templates", "cache_default_path")
    _hx_fields = ["ras_ext", "path", "modules", "libpaths", "templates", "cache_default_path"]

    def __init__(self,ras_ext,path,modules,libpaths,templates,cache_default_path):
        # src/gamma/Common.hx:24
        self.ras_ext = ras_ext
        # src/gamma/Common.hx:25
        self.path = path
        # src/gamma/Common.hx:26
        self.modules = modules
        # src/gamma/Common.hx:27
        self.libpaths = libpaths
        # src/gamma/Common.hx:28
        self.templates = templates
        # src/gamma/Common.hx:29
        self.cache_default_path = cache_default_path



class gamma__Common_Templates:
    _hx_class_name = "gamma._Common.Templates"
    __slots__ = ("IW", "short", "long", "tab")
    _hx_fields = ["IW", "short", "long", "tab"]

    def __init__(self,IW,short,long,tab):
        # src/gamma/Common.hx:41
        self.IW = IW
        # src/gamma/Common.hx:42
        self.short = short
        # src/gamma/Common.hx:43
        self.long = long
        # src/gamma/Common.hx:44
        self.tab = tab



class gamma_Printable:
    _hx_class_name = "gamma.Printable"
    __slots__ = ()
    _hx_methods = ["toString"]


class gamma_Common:
    _hx_class_name = "gamma.Common"
    __slots__ = ()
    _hx_statics = ["versions", "settings", "gamma_commands", "make_cmd"]

    @staticmethod
    def make_cmd(name):
        # src/gamma/Common.hx:80
        def _hx_local_0(args,debug = False):
            # src/gamma/Common.hx:81
            _g = []
            _g1 = 0
            while (_g1 < len(args)):
                elem = (args[_g1] if _g1 >= 0 and _g1 < len(args) else None)
                _g1 = (_g1 + 1)
                x = (("[" + HxOverrides.stringOrNull(",".join([python_Boot.toString1(x1,'') for x1 in args]))) + "]")
                _g.append(x)
            args1 = _g
            # src/gamma/Common.hx:82
            cmd = "${name} ${args}"
            # src/gamma/Common.hx:84
            if debug:
                # src/gamma/Common.hx:85
                print("Command: ${cmd}")
                # src/gamma/Common.hx:86
                return ""
            # src/gamma/Common.hx:89
            proc = sys_io_Process("ls",args1)
            # src/gamma/Common.hx:91
            if (proc.exitCode() != 0):
                raise RuntimeError("\nNon zero returncode from command: \n                                       \n'${cmd}'\n \nOUTPUT OF THE COMMAND: \n                                       \n\n{proc.stderr.readAll()}")
            # src/gamma/Common.hx:97
            return proc.stdout.readAll().toString()
        return _hx_local_0


class gamma_Point:
    _hx_class_name = "gamma.Point"
    __slots__ = ("x", "y")
    _hx_fields = ["x", "y"]
    _hx_methods = ["in_rect"]

    def __init__(self,x,y):
        # src/gamma/Common.hx:107
        self.x = x
        # src/gamma/Common.hx:108
        self.y = y

    def in_rect(self,rect):
        # src/gamma/Common.hx:112
        if (((self.x > rect.min.x) and ((self.x < rect.max.x))) and ((self.y > rect.min.y))):
            return (self.y < rect.max.y)
        else:
            return False



class gamma_Rect:
    _hx_class_name = "gamma.Rect"
    __slots__ = ("max", "min")
    _hx_fields = ["max", "min"]

    def __init__(self,_hx_min,_hx_max):
        # src/gamma/Common.hx:123
        self.max = _hx_max
        # src/gamma/Common.hx:124
        self.min = _hx_min



class haxe_io_Bytes:
    _hx_class_name = "haxe.io.Bytes"
    __slots__ = ("length", "b")
    _hx_fields = ["length", "b"]
    _hx_methods = ["blit", "getString", "toString"]
    _hx_statics = ["alloc", "ofData"]

    def __init__(self,length,b):
        # /home/istvan/packages/haxe/std/haxe/io/Bytes.hx:34
        self.length = length
        # /home/istvan/packages/haxe/std/haxe/io/Bytes.hx:35
        self.b = b

    def blit(self,pos,src,srcpos,_hx_len):
        # /home/istvan/packages/haxe/std/haxe/io/Bytes.hx:81
        if (((((pos < 0) or ((srcpos < 0))) or ((_hx_len < 0))) or (((pos + _hx_len) > self.length))) or (((srcpos + _hx_len) > src.length))):
            raise _HxException(haxe_io_Error.OutsideBounds)
        # /home/istvan/packages/haxe/std/haxe/io/Bytes.hx:95
        self.b[pos:pos+_hx_len] = src.b[srcpos:srcpos+_hx_len]

    def getString(self,pos,_hx_len):
        # /home/istvan/packages/haxe/std/haxe/io/Bytes.hx:362
        if (((pos < 0) or ((_hx_len < 0))) or (((pos + _hx_len) > self.length))):
            raise _HxException(haxe_io_Error.OutsideBounds)
        # /home/istvan/packages/haxe/std/haxe/io/Bytes.hx:382
        return self.b[pos:pos+_hx_len].decode('UTF-8','replace')

    def toString(self):
        # /home/istvan/packages/haxe/std/haxe/io/Bytes.hx:440
        return self.getString(0,self.length)

    @staticmethod
    def alloc(length):
        # /home/istvan/packages/haxe/std/haxe/io/Bytes.hx:480
        return haxe_io_Bytes(length,bytearray(length))

    @staticmethod
    def ofData(b):
        # /home/istvan/packages/haxe/std/haxe/io/Bytes.hx:561
        return haxe_io_Bytes(len(b),b)



class haxe_io_BytesBuffer:
    _hx_class_name = "haxe.io.BytesBuffer"
    __slots__ = ("b",)
    _hx_fields = ["b"]
    _hx_methods = ["getBytes"]

    def __init__(self):
        # /home/istvan/packages/haxe/std/haxe/io/BytesBuffer.hx:60
        self.b = list()

    def getBytes(self):
        # /home/istvan/packages/haxe/std/haxe/io/BytesBuffer.hx:207
        buf = bytearray(self.b)
        # /home/istvan/packages/haxe/std/haxe/io/BytesBuffer.hx:208
        _hx_bytes = haxe_io_Bytes(len(buf),buf)
        # /home/istvan/packages/haxe/std/haxe/io/BytesBuffer.hx:214
        self.b = None
        # /home/istvan/packages/haxe/std/haxe/io/BytesBuffer.hx:215
        return _hx_bytes



class haxe_io_Input:
    _hx_class_name = "haxe.io.Input"
    __slots__ = ("bigEndian",)
    _hx_fields = ["bigEndian"]
    _hx_methods = ["readByte", "readBytes", "set_bigEndian", "readAll"]

    def readByte(self):
        # /home/istvan/packages/haxe/std/haxe/io/Input.hx:53
        raise _HxException("Not implemented")

    def readBytes(self,s,pos,_hx_len):
        # /home/istvan/packages/haxe/std/haxe/io/Input.hx:65
        k = _hx_len
        # /home/istvan/packages/haxe/std/haxe/io/Input.hx:66
        b = s.b
        # /home/istvan/packages/haxe/std/haxe/io/Input.hx:67
        if (((pos < 0) or ((_hx_len < 0))) or (((pos + _hx_len) > s.length))):
            raise _HxException(haxe_io_Error.OutsideBounds)
        # /home/istvan/packages/haxe/std/haxe/io/Input.hx:69
        try:
            while (k > 0):
                # /home/istvan/packages/haxe/std/haxe/io/Input.hx:78
                b[pos] = self.readByte()
                # /home/istvan/packages/haxe/std/haxe/io/Input.hx:80
                pos = (pos + 1)
                # /home/istvan/packages/haxe/std/haxe/io/Input.hx:81
                k = (k - 1)
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            if isinstance(_hx_e1, haxe_io_Eof):
                    pass
            else:
                raise _hx_e
        # /home/istvan/packages/haxe/std/haxe/io/Input.hx:84
        return (_hx_len - k)

    def set_bigEndian(self,b):
        # /home/istvan/packages/haxe/std/haxe/io/Input.hx:96
        self.bigEndian = b
        # /home/istvan/packages/haxe/std/haxe/io/Input.hx:97
        return b

    def readAll(self,bufsize = None):
        # /home/istvan/packages/haxe/std/haxe/io/Input.hx:109
        if (bufsize is None):
            bufsize = 16384
        # /home/istvan/packages/haxe/std/haxe/io/Input.hx:116
        buf = haxe_io_Bytes.alloc(bufsize)
        # /home/istvan/packages/haxe/std/haxe/io/Input.hx:117
        total = haxe_io_BytesBuffer()
        # /home/istvan/packages/haxe/std/haxe/io/Input.hx:118
        try:
            while True:
                # /home/istvan/packages/haxe/std/haxe/io/Input.hx:120
                _hx_len = self.readBytes(buf,0,bufsize)
                # /home/istvan/packages/haxe/std/haxe/io/Input.hx:121
                if (_hx_len == 0):
                    raise _HxException(haxe_io_Error.Blocked)
                # /home/istvan/packages/haxe/std/haxe/io/Input.hx:123
                # /home/istvan/packages/haxe/std/haxe/io/Input.hx:123
                if ((_hx_len < 0) or ((_hx_len > buf.length))):
                    raise _HxException(haxe_io_Error.OutsideBounds)
                b1 = total.b
                b2 = buf.b
                _g1 = 0
                _g = _hx_len
                while (_g1 < _g):
                    i = _g1
                    _g1 = (_g1 + 1)
                    _this = total.b
                    _this.append(b2[i])
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            if isinstance(_hx_e1, haxe_io_Eof):
                    pass
            else:
                raise _hx_e
        # /home/istvan/packages/haxe/std/haxe/io/Input.hx:126
        return total.getBytes()



class haxe_io_Eof:
    _hx_class_name = "haxe.io.Eof"
    __slots__ = ()
    _hx_methods = ["toString"]

    def __init__(self):
        pass

    def toString(self):
        # /home/istvan/packages/haxe/std/haxe/io/Eof.hx:31
        return "Eof"


class haxe_io_Error(Enum):
    __slots__ = ()
    _hx_class_name = "haxe.io.Error"

    @staticmethod
    def Custom(e):
        return haxe_io_Error("Custom", 3, [e])
haxe_io_Error.Blocked = haxe_io_Error("Blocked", 0, list())
haxe_io_Error.Overflow = haxe_io_Error("Overflow", 1, list())
haxe_io_Error.OutsideBounds = haxe_io_Error("OutsideBounds", 2, list())


class haxe_io_Output:
    _hx_class_name = "haxe.io.Output"
    __slots__ = ("bigEndian",)
    _hx_fields = ["bigEndian"]
    _hx_methods = ["set_bigEndian"]

    def set_bigEndian(self,b):
        # /home/istvan/packages/haxe/std/haxe/io/Output.hx:97
        self.bigEndian = b
        # /home/istvan/packages/haxe/std/haxe/io/Output.hx:98
        return b



class python_Boot:
    _hx_class_name = "python.Boot"
    __slots__ = ()
    _hx_statics = ["keywords", "toString1", "fields", "simpleField", "field", "getInstanceFields", "getSuperClass", "getClassFields", "prefixLength", "unhandleKeywords"]

    @staticmethod
    def toString1(o,s):
        # /home/istvan/packages/haxe/std/python/Boot.hx:94
        if (o is None):
            return "null"
        # /home/istvan/packages/haxe/std/python/Boot.hx:96
        if isinstance(o,str):
            return o
        # /home/istvan/packages/haxe/std/python/Boot.hx:98
        if (s is None):
            s = ""
        # /home/istvan/packages/haxe/std/python/Boot.hx:99
        if (len(s) >= 5):
            return "<...>"
        # /home/istvan/packages/haxe/std/python/Boot.hx:101
        if isinstance(o,bool):
            if o:
                return "true"
            else:
                return "false"
        # /home/istvan/packages/haxe/std/python/Boot.hx:104
        if isinstance(o,int):
            return str(o)
        # /home/istvan/packages/haxe/std/python/Boot.hx:108
        if isinstance(o,float):
            try:
                if (o == int(o)):
                    return str(Math.floor((o + 0.5)))
                else:
                    return str(o)
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                e = _hx_e1
                return str(o)
        # /home/istvan/packages/haxe/std/python/Boot.hx:120
        if isinstance(o,list):
            # /home/istvan/packages/haxe/std/python/Boot.hx:122
            o1 = o
            # /home/istvan/packages/haxe/std/python/Boot.hx:124
            l = len(o1)
            # /home/istvan/packages/haxe/std/python/Boot.hx:126
            st = "["
            # /home/istvan/packages/haxe/std/python/Boot.hx:127
            s = (("null" if s is None else s) + "\t")
            # /home/istvan/packages/haxe/std/python/Boot.hx:128
            # /home/istvan/packages/haxe/std/python/Boot.hx:128
            _g1 = 0
            _g = l
            while (_g1 < _g):
                i = _g1
                _g1 = (_g1 + 1)
                # /home/istvan/packages/haxe/std/python/Boot.hx:129
                prefix = ""
                # /home/istvan/packages/haxe/std/python/Boot.hx:130
                if (i > 0):
                    prefix = ","
                # /home/istvan/packages/haxe/std/python/Boot.hx:133
                st = (("null" if st is None else st) + HxOverrides.stringOrNull(((("null" if prefix is None else prefix) + HxOverrides.stringOrNull(python_Boot.toString1((o1[i] if i >= 0 and i < len(o1) else None),s))))))
            # /home/istvan/packages/haxe/std/python/Boot.hx:135
            st = (("null" if st is None else st) + "]")
            # /home/istvan/packages/haxe/std/python/Boot.hx:136
            return st
        # /home/istvan/packages/haxe/std/python/Boot.hx:139
        try:
            if hasattr(o,"toString"):
                return o.toString()
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            pass
        # /home/istvan/packages/haxe/std/python/Boot.hx:145
        if (python_lib_Inspect.isfunction(o) or python_lib_Inspect.ismethod(o)):
            return "<function>"
        # /home/istvan/packages/haxe/std/python/Boot.hx:147
        if hasattr(o,"__class__"):
            # /home/istvan/packages/haxe/std/python/Boot.hx:150
            if isinstance(o,_hx_AnonObject):
                # /home/istvan/packages/haxe/std/python/Boot.hx:152
                toStr = None
                # /home/istvan/packages/haxe/std/python/Boot.hx:153
                try:
                    # /home/istvan/packages/haxe/std/python/Boot.hx:155
                    fields = python_Boot.fields(o)
                    # /home/istvan/packages/haxe/std/python/Boot.hx:156
                    _g2 = []
                    _g11 = 0
                    while (_g11 < len(fields)):
                        f = (fields[_g11] if _g11 >= 0 and _g11 < len(fields) else None)
                        _g11 = (_g11 + 1)
                        x = ((("" + ("null" if f is None else f)) + " : ") + HxOverrides.stringOrNull(python_Boot.toString1(python_Boot.simpleField(o,f),(("null" if s is None else s) + "\t"))))
                        _g2.append(x)
                    fieldsStr = _g2
                    # /home/istvan/packages/haxe/std/python/Boot.hx:157
                    toStr = (("{ " + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr]))) + " }")
                except Exception as _hx_e:
                    _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                    e2 = _hx_e1
                    return "{ ... }"
                # /home/istvan/packages/haxe/std/python/Boot.hx:163
                if (toStr is None):
                    return "{ ... }"
                else:
                    return toStr
            # /home/istvan/packages/haxe/std/python/Boot.hx:173
            if isinstance(o,Enum):
                # /home/istvan/packages/haxe/std/python/Boot.hx:175
                o2 = o
                # /home/istvan/packages/haxe/std/python/Boot.hx:177
                l1 = len(o2.params)
                # /home/istvan/packages/haxe/std/python/Boot.hx:178
                hasParams = (l1 > 0)
                # /home/istvan/packages/haxe/std/python/Boot.hx:179
                if hasParams:
                    # /home/istvan/packages/haxe/std/python/Boot.hx:180
                    paramsStr = ""
                    # /home/istvan/packages/haxe/std/python/Boot.hx:181
                    # /home/istvan/packages/haxe/std/python/Boot.hx:181
                    _g12 = 0
                    _g3 = l1
                    while (_g12 < _g3):
                        i1 = _g12
                        _g12 = (_g12 + 1)
                        # /home/istvan/packages/haxe/std/python/Boot.hx:182
                        prefix1 = ""
                        # /home/istvan/packages/haxe/std/python/Boot.hx:183
                        if (i1 > 0):
                            prefix1 = ","
                        # /home/istvan/packages/haxe/std/python/Boot.hx:186
                        paramsStr = (("null" if paramsStr is None else paramsStr) + HxOverrides.stringOrNull(((("null" if prefix1 is None else prefix1) + HxOverrides.stringOrNull(python_Boot.toString1((o2.params[i1] if i1 >= 0 and i1 < len(o2.params) else None),s))))))
                    # /home/istvan/packages/haxe/std/python/Boot.hx:188
                    return (((HxOverrides.stringOrNull(o2.tag) + "(") + ("null" if paramsStr is None else paramsStr)) + ")")
                else:
                    return o2.tag
            # /home/istvan/packages/haxe/std/python/Boot.hx:194
            if hasattr(o,"_hx_class_name"):
                if (o.__class__.__name__ != "type"):
                    # /home/istvan/packages/haxe/std/python/Boot.hx:196
                    fields1 = python_Boot.getInstanceFields(o)
                    # /home/istvan/packages/haxe/std/python/Boot.hx:197
                    _g4 = []
                    _g13 = 0
                    while (_g13 < len(fields1)):
                        f1 = (fields1[_g13] if _g13 >= 0 and _g13 < len(fields1) else None)
                        _g13 = (_g13 + 1)
                        x1 = ((("" + ("null" if f1 is None else f1)) + " : ") + HxOverrides.stringOrNull(python_Boot.toString1(python_Boot.simpleField(o,f1),(("null" if s is None else s) + "\t"))))
                        _g4.append(x1)
                    fieldsStr1 = _g4
                    # /home/istvan/packages/haxe/std/python/Boot.hx:199
                    toStr1 = (((HxOverrides.stringOrNull(o._hx_class_name) + "( ") + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr1]))) + " )")
                    # /home/istvan/packages/haxe/std/python/Boot.hx:200
                    return toStr1
                else:
                    # /home/istvan/packages/haxe/std/python/Boot.hx:202
                    fields2 = python_Boot.getClassFields(o)
                    # /home/istvan/packages/haxe/std/python/Boot.hx:203
                    _g5 = []
                    _g14 = 0
                    while (_g14 < len(fields2)):
                        f2 = (fields2[_g14] if _g14 >= 0 and _g14 < len(fields2) else None)
                        _g14 = (_g14 + 1)
                        x2 = ((("" + ("null" if f2 is None else f2)) + " : ") + HxOverrides.stringOrNull(python_Boot.toString1(python_Boot.simpleField(o,f2),(("null" if s is None else s) + "\t"))))
                        _g5.append(x2)
                    fieldsStr2 = _g5
                    # /home/istvan/packages/haxe/std/python/Boot.hx:204
                    toStr2 = (((("#" + HxOverrides.stringOrNull(o._hx_class_name)) + "( ") + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr2]))) + " )")
                    # /home/istvan/packages/haxe/std/python/Boot.hx:205
                    return toStr2
            # /home/istvan/packages/haxe/std/python/Boot.hx:209
            if (o == str):
                return "#String"
            # /home/istvan/packages/haxe/std/python/Boot.hx:213
            if (o == list):
                return "#Array"
            # /home/istvan/packages/haxe/std/python/Boot.hx:217
            if callable(o):
                return "function"
            # /home/istvan/packages/haxe/std/python/Boot.hx:220
            try:
                if hasattr(o,"__repr__"):
                    return o.__repr__()
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                pass
            # /home/istvan/packages/haxe/std/python/Boot.hx:226
            if hasattr(o,"__str__"):
                return o.__str__([])
            # /home/istvan/packages/haxe/std/python/Boot.hx:230
            if hasattr(o,"__name__"):
                return o.__name__
            # /home/istvan/packages/haxe/std/python/Boot.hx:233
            return "???"
        else:
            return str(o)

    @staticmethod
    def fields(o):
        # /home/istvan/packages/haxe/std/python/Boot.hx:245
        a = []
        # /home/istvan/packages/haxe/std/python/Boot.hx:246
        if (o is not None):
            # /home/istvan/packages/haxe/std/python/Boot.hx:247
            if hasattr(o,"_hx_fields"):
                # /home/istvan/packages/haxe/std/python/Boot.hx:248
                fields = o._hx_fields
                # /home/istvan/packages/haxe/std/python/Boot.hx:249
                return list(fields)
            # /home/istvan/packages/haxe/std/python/Boot.hx:251
            if isinstance(o,_hx_AnonObject):
                # /home/istvan/packages/haxe/std/python/Boot.hx:253
                d = o.__dict__
                # /home/istvan/packages/haxe/std/python/Boot.hx:254
                keys = d.keys()
                # /home/istvan/packages/haxe/std/python/Boot.hx:255
                handler = python_Boot.unhandleKeywords
                # /home/istvan/packages/haxe/std/python/Boot.hx:257
                for k in keys:
                # /home/istvan/packages/haxe/std/python/Boot.hx:258
                    a.append(handler(k))
            elif hasattr(o,"__dict__"):
                # /home/istvan/packages/haxe/std/python/Boot.hx:262
                d1 = o.__dict__
                # /home/istvan/packages/haxe/std/python/Boot.hx:263
                keys1 = d1.keys()
                # /home/istvan/packages/haxe/std/python/Boot.hx:264
                for k in keys1:
                # /home/istvan/packages/haxe/std/python/Boot.hx:265
                    a.append(k)
        # /home/istvan/packages/haxe/std/python/Boot.hx:269
        return a

    @staticmethod
    def simpleField(o,field):
        # /home/istvan/packages/haxe/std/python/Boot.hx:281
        if (field is None):
            return None
        # /home/istvan/packages/haxe/std/python/Boot.hx:283
        field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
        # /home/istvan/packages/haxe/std/python/Boot.hx:284
        if hasattr(o,field1):
            return getattr(o,field1)
        else:
            return None

    @staticmethod
    def field(o,field):
        # /home/istvan/packages/haxe/std/python/Boot.hx:288
        if (field is None):
            return None
        # /home/istvan/packages/haxe/std/python/Boot.hx:290
        field1 = field
        _hx_local_0 = len(field1)
        # /home/istvan/packages/haxe/std/python/Boot.hx:295
        if (_hx_local_0 == 10):
            if (field1 == "charCodeAt"):
                if isinstance(o,str):
                    # /home/istvan/packages/haxe/std/python/Boot.hx:295
                    def _hx_local_3():
                        # /home/istvan/packages/haxe/std/python/Boot.hx:295
                        def _hx_local_2(f1,s1):
                            # /home/istvan/packages/haxe/std/python/Boot.hx:295
                            def _hx_local_1(a11):
                                # /home/istvan/packages/haxe/std/python/Boot.hx:295
                                return f1(s1,a11)
                            return _hx_local_1
                        return _hx_local_2(HxString.charCodeAt,o)
                    return _hx_local_3()
        elif (_hx_local_0 == 11):
            if (field1 == "lastIndexOf"):
                if isinstance(o,str):
                    # /home/istvan/packages/haxe/std/python/Boot.hx:297
                    def _hx_local_6():
                        # /home/istvan/packages/haxe/std/python/Boot.hx:297
                        def _hx_local_5(f8,s3):
                            # /home/istvan/packages/haxe/std/python/Boot.hx:297
                            def _hx_local_4(a15):
                                # /home/istvan/packages/haxe/std/python/Boot.hx:297
                                return f8(s3,a15)
                            return _hx_local_4
                        return _hx_local_5(HxString.lastIndexOf,o)
                    return _hx_local_6()
                elif isinstance(o,list):
                    # /home/istvan/packages/haxe/std/python/Boot.hx:315
                    def _hx_local_9():
                        # /home/istvan/packages/haxe/std/python/Boot.hx:315
                        def _hx_local_8(f9,a4):
                            # /home/istvan/packages/haxe/std/python/Boot.hx:315
                            def _hx_local_7(x4):
                                # /home/istvan/packages/haxe/std/python/Boot.hx:315
                                return f9(a4,x4)
                            return _hx_local_7
                        return _hx_local_8(python_internal_ArrayImpl.lastIndexOf,o)
                    return _hx_local_9()
            elif (field1 == "toLowerCase"):
                if isinstance(o,str):
                    # /home/istvan/packages/haxe/std/python/Boot.hx:292
                    def _hx_local_12():
                        # /home/istvan/packages/haxe/std/python/Boot.hx:292
                        def _hx_local_11(f25,s7):
                            # /home/istvan/packages/haxe/std/python/Boot.hx:292
                            def _hx_local_10():
                                # /home/istvan/packages/haxe/std/python/Boot.hx:292
                                return f25(s7)
                            return _hx_local_10
                        return _hx_local_11(HxString.toLowerCase,o)
                    return _hx_local_12()
            elif (field1 == "toUpperCase"):
                if isinstance(o,str):
                    # /home/istvan/packages/haxe/std/python/Boot.hx:293
                    def _hx_local_15():
                        # /home/istvan/packages/haxe/std/python/Boot.hx:293
                        def _hx_local_14(f28,s9):
                            # /home/istvan/packages/haxe/std/python/Boot.hx:293
                            def _hx_local_13():
                                # /home/istvan/packages/haxe/std/python/Boot.hx:293
                                return f28(s9)
                            return _hx_local_13
                        return _hx_local_14(HxString.toUpperCase,o)
                    return _hx_local_15()
        elif (_hx_local_0 == 9):
            if (field1 == "substring"):
                if isinstance(o,str):
                    # /home/istvan/packages/haxe/std/python/Boot.hx:300
                    def _hx_local_18():
                        # /home/istvan/packages/haxe/std/python/Boot.hx:300
                        def _hx_local_17(f24,s6):
                            # /home/istvan/packages/haxe/std/python/Boot.hx:300
                            def _hx_local_16(a19):
                                # /home/istvan/packages/haxe/std/python/Boot.hx:300
                                return f24(s6,a19)
                            return _hx_local_16
                        return _hx_local_17(HxString.substring,o)
                    return _hx_local_18()
        elif (_hx_local_0 == 4):
            if (field1 == "copy"):
                if isinstance(o,list):
                    # /home/istvan/packages/haxe/std/python/Boot.hx:306
                    def _hx_local_19():
                        # /home/istvan/packages/haxe/std/python/Boot.hx:306
                        return list(o)
                    return _hx_local_19
            elif (field1 == "join"):
                if isinstance(o,list):
                    # /home/istvan/packages/haxe/std/python/Boot.hx:309
                    def _hx_local_20(sep):
                        # /home/istvan/packages/haxe/std/python/Boot.hx:309
                        return sep.join([python_Boot.toString1(x1,'') for x1 in o])
                    return _hx_local_20
            elif (field1 == "push"):
                if isinstance(o,list):
                    # /home/istvan/packages/haxe/std/python/Boot.hx:312
                    def _hx_local_23():
                        # /home/istvan/packages/haxe/std/python/Boot.hx:312
                        def _hx_local_22(f14,x7):
                            # /home/istvan/packages/haxe/std/python/Boot.hx:312
                            def _hx_local_21(e):
                                # /home/istvan/packages/haxe/std/python/Boot.hx:312
                                return f14(x7,e)
                            return _hx_local_21
                        return _hx_local_22(python_internal_ArrayImpl.push,o)
                    return _hx_local_23()
            elif (field1 == "sort"):
                if isinstance(o,list):
                    # /home/istvan/packages/haxe/std/python/Boot.hx:320
                    def _hx_local_26():
                        # /home/istvan/packages/haxe/std/python/Boot.hx:320
                        def _hx_local_25(f19,x11):
                            # /home/istvan/packages/haxe/std/python/Boot.hx:320
                            def _hx_local_24(f20):
                                # /home/istvan/packages/haxe/std/python/Boot.hx:320
                                f19(x11,f20)
                            return _hx_local_24
                        return _hx_local_25(python_internal_ArrayImpl.sort,o)
                    return _hx_local_26()
        elif (_hx_local_0 == 5):
            if (field1 == "shift"):
                if isinstance(o,list):
                    # /home/istvan/packages/haxe/std/python/Boot.hx:318
                    def _hx_local_29():
                        # /home/istvan/packages/haxe/std/python/Boot.hx:318
                        def _hx_local_28(f17,x9):
                            # /home/istvan/packages/haxe/std/python/Boot.hx:318
                            def _hx_local_27():
                                # /home/istvan/packages/haxe/std/python/Boot.hx:318
                                return f17(x9)
                            return _hx_local_27
                        return _hx_local_28(python_internal_ArrayImpl.shift,o)
                    return _hx_local_29()
            elif (field1 == "slice"):
                if isinstance(o,list):
                    # /home/istvan/packages/haxe/std/python/Boot.hx:319
                    def _hx_local_32():
                        # /home/istvan/packages/haxe/std/python/Boot.hx:319
                        def _hx_local_31(f18,x10):
                            # /home/istvan/packages/haxe/std/python/Boot.hx:319
                            def _hx_local_30(a16):
                                # /home/istvan/packages/haxe/std/python/Boot.hx:319
                                return f18(x10,a16)
                            return _hx_local_30
                        return _hx_local_31(python_internal_ArrayImpl.slice,o)
                    return _hx_local_32()
            elif (field1 == "split"):
                if isinstance(o,str):
                    # /home/istvan/packages/haxe/std/python/Boot.hx:298
                    def _hx_local_35():
                        # /home/istvan/packages/haxe/std/python/Boot.hx:298
                        def _hx_local_34(f22,s4):
                            # /home/istvan/packages/haxe/std/python/Boot.hx:298
                            def _hx_local_33(d):
                                # /home/istvan/packages/haxe/std/python/Boot.hx:298
                                return f22(s4,d)
                            return _hx_local_33
                        return _hx_local_34(HxString.split,o)
                    return _hx_local_35()
        elif (_hx_local_0 == 7):
            if (field1 == "indexOf"):
                if isinstance(o,str):
                    # /home/istvan/packages/haxe/std/python/Boot.hx:296
                    def _hx_local_38():
                        # /home/istvan/packages/haxe/std/python/Boot.hx:296
                        def _hx_local_37(f4,s2):
                            # /home/istvan/packages/haxe/std/python/Boot.hx:296
                            def _hx_local_36(a13):
                                # /home/istvan/packages/haxe/std/python/Boot.hx:296
                                return f4(s2,a13)
                            return _hx_local_36
                        return _hx_local_37(HxString.indexOf,o)
                    return _hx_local_38()
                elif isinstance(o,list):
                    # /home/istvan/packages/haxe/std/python/Boot.hx:314
                    def _hx_local_41():
                        # /home/istvan/packages/haxe/std/python/Boot.hx:314
                        def _hx_local_40(f5,a):
                            # /home/istvan/packages/haxe/std/python/Boot.hx:314
                            def _hx_local_39(x1):
                                # /home/istvan/packages/haxe/std/python/Boot.hx:314
                                return f5(a,x1)
                            return _hx_local_39
                        return _hx_local_40(python_internal_ArrayImpl.indexOf,o)
                    return _hx_local_41()
            elif (field1 == "reverse"):
                if isinstance(o,list):
                    # /home/istvan/packages/haxe/std/python/Boot.hx:317
                    def _hx_local_44():
                        # /home/istvan/packages/haxe/std/python/Boot.hx:317
                        def _hx_local_43(f16,a5):
                            # /home/istvan/packages/haxe/std/python/Boot.hx:317
                            def _hx_local_42():
                                # /home/istvan/packages/haxe/std/python/Boot.hx:317
                                f16(a5)
                            return _hx_local_42
                        return _hx_local_43(python_internal_ArrayImpl.reverse,o)
                    return _hx_local_44()
            elif (field1 == "unshift"):
                if isinstance(o,list):
                    # /home/istvan/packages/haxe/std/python/Boot.hx:313
                    def _hx_local_47():
                        # /home/istvan/packages/haxe/std/python/Boot.hx:313
                        def _hx_local_46(f29,x14):
                            # /home/istvan/packages/haxe/std/python/Boot.hx:313
                            def _hx_local_45(e2):
                                # /home/istvan/packages/haxe/std/python/Boot.hx:313
                                f29(x14,e2)
                            return _hx_local_45
                        return _hx_local_46(python_internal_ArrayImpl.unshift,o)
                    return _hx_local_47()
        elif (_hx_local_0 == 3):
            if (field1 == "map"):
                if isinstance(o,list):
                    # /home/istvan/packages/haxe/std/python/Boot.hx:303
                    def _hx_local_50():
                        # /home/istvan/packages/haxe/std/python/Boot.hx:303
                        def _hx_local_49(f12,x5):
                            # /home/istvan/packages/haxe/std/python/Boot.hx:303
                            def _hx_local_48(f10):
                                # /home/istvan/packages/haxe/std/python/Boot.hx:303
                                return f12(x5,f10)
                            return _hx_local_48
                        return _hx_local_49(python_internal_ArrayImpl.map,o)
                    return _hx_local_50()
            elif (field1 == "pop"):
                if isinstance(o,list):
                    # /home/istvan/packages/haxe/std/python/Boot.hx:311
                    def _hx_local_53():
                        # /home/istvan/packages/haxe/std/python/Boot.hx:311
                        def _hx_local_52(f13,x6):
                            # /home/istvan/packages/haxe/std/python/Boot.hx:311
                            def _hx_local_51():
                                # /home/istvan/packages/haxe/std/python/Boot.hx:311
                                return f13(x6)
                            return _hx_local_51
                        return _hx_local_52(python_internal_ArrayImpl.pop,o)
                    return _hx_local_53()
        elif (_hx_local_0 == 8):
            if (field1 == "iterator"):
                if isinstance(o,list):
                    # /home/istvan/packages/haxe/std/python/Boot.hx:307
                    def _hx_local_56():
                        # /home/istvan/packages/haxe/std/python/Boot.hx:307
                        def _hx_local_55(f7,x3):
                            # /home/istvan/packages/haxe/std/python/Boot.hx:307
                            def _hx_local_54():
                                # /home/istvan/packages/haxe/std/python/Boot.hx:307
                                return f7(x3)
                            return _hx_local_54
                        return _hx_local_55(python_internal_ArrayImpl.iterator,o)
                    return _hx_local_56()
            elif (field1 == "toString"):
                if isinstance(o,str):
                    # /home/istvan/packages/haxe/std/python/Boot.hx:301
                    def _hx_local_59():
                        # /home/istvan/packages/haxe/std/python/Boot.hx:301
                        def _hx_local_58(f26,s8):
                            # /home/istvan/packages/haxe/std/python/Boot.hx:301
                            def _hx_local_57():
                                # /home/istvan/packages/haxe/std/python/Boot.hx:301
                                return f26(s8)
                            return _hx_local_57
                        return _hx_local_58(HxString.toString,o)
                    return _hx_local_59()
                elif isinstance(o,list):
                    # /home/istvan/packages/haxe/std/python/Boot.hx:310
                    def _hx_local_62():
                        # /home/istvan/packages/haxe/std/python/Boot.hx:310
                        def _hx_local_61(f27,x13):
                            # /home/istvan/packages/haxe/std/python/Boot.hx:310
                            def _hx_local_60():
                                # /home/istvan/packages/haxe/std/python/Boot.hx:310
                                return f27(x13)
                            return _hx_local_60
                        return _hx_local_61(python_internal_ArrayImpl.toString,o)
                    return _hx_local_62()
        elif (_hx_local_0 == 6):
            if (field1 == "charAt"):
                if isinstance(o,str):
                    # /home/istvan/packages/haxe/std/python/Boot.hx:294
                    def _hx_local_65():
                        # /home/istvan/packages/haxe/std/python/Boot.hx:294
                        def _hx_local_64(f,s):
                            # /home/istvan/packages/haxe/std/python/Boot.hx:294
                            def _hx_local_63(a1):
                                # /home/istvan/packages/haxe/std/python/Boot.hx:294
                                return f(s,a1)
                            return _hx_local_63
                        return _hx_local_64(HxString.charAt,o)
                    return _hx_local_65()
            elif (field1 == "concat"):
                if isinstance(o,list):
                    # /home/istvan/packages/haxe/std/python/Boot.hx:305
                    def _hx_local_68():
                        # /home/istvan/packages/haxe/std/python/Boot.hx:305
                        def _hx_local_67(f2,a12):
                            # /home/istvan/packages/haxe/std/python/Boot.hx:305
                            def _hx_local_66(a2):
                                # /home/istvan/packages/haxe/std/python/Boot.hx:305
                                return f2(a12,a2)
                            return _hx_local_66
                        return _hx_local_67(python_internal_ArrayImpl.concat,o)
                    return _hx_local_68()
            elif (field1 == "filter"):
                if isinstance(o,list):
                    # /home/istvan/packages/haxe/std/python/Boot.hx:304
                    def _hx_local_71():
                        # /home/istvan/packages/haxe/std/python/Boot.hx:304
                        def _hx_local_70(f11,x):
                            # /home/istvan/packages/haxe/std/python/Boot.hx:304
                            def _hx_local_69(f3):
                                # /home/istvan/packages/haxe/std/python/Boot.hx:304
                                return f11(x,f3)
                            return _hx_local_69
                        return _hx_local_70(python_internal_ArrayImpl.filter,o)
                    return _hx_local_71()
            elif (field1 == "insert"):
                if isinstance(o,list):
                    # /home/istvan/packages/haxe/std/python/Boot.hx:308
                    def _hx_local_74():
                        # /home/istvan/packages/haxe/std/python/Boot.hx:308
                        def _hx_local_73(f6,a3):
                            # /home/istvan/packages/haxe/std/python/Boot.hx:308
                            def _hx_local_72(a14,x2):
                                # /home/istvan/packages/haxe/std/python/Boot.hx:308
                                f6(a3,a14,x2)
                            return _hx_local_72
                        return _hx_local_73(python_internal_ArrayImpl.insert,o)
                    return _hx_local_74()
            elif (field1 == "length"):
                if isinstance(o,str):
                    return len(o)
                elif isinstance(o,list):
                    return len(o)
            elif (field1 == "remove"):
                if isinstance(o,list):
                    # /home/istvan/packages/haxe/std/python/Boot.hx:316
                    def _hx_local_77():
                        # /home/istvan/packages/haxe/std/python/Boot.hx:316
                        def _hx_local_76(f15,x8):
                            # /home/istvan/packages/haxe/std/python/Boot.hx:316
                            def _hx_local_75(e1):
                                # /home/istvan/packages/haxe/std/python/Boot.hx:316
                                return f15(x8,e1)
                            return _hx_local_75
                        return _hx_local_76(python_internal_ArrayImpl.remove,o)
                    return _hx_local_77()
            elif (field1 == "splice"):
                if isinstance(o,list):
                    # /home/istvan/packages/haxe/std/python/Boot.hx:321
                    def _hx_local_80():
                        # /home/istvan/packages/haxe/std/python/Boot.hx:321
                        def _hx_local_79(f21,x12):
                            # /home/istvan/packages/haxe/std/python/Boot.hx:321
                            def _hx_local_78(a17,a21):
                                # /home/istvan/packages/haxe/std/python/Boot.hx:321
                                return f21(x12,a17,a21)
                            return _hx_local_78
                        return _hx_local_79(python_internal_ArrayImpl.splice,o)
                    return _hx_local_80()
            elif (field1 == "substr"):
                if isinstance(o,str):
                    # /home/istvan/packages/haxe/std/python/Boot.hx:299
                    def _hx_local_83():
                        # /home/istvan/packages/haxe/std/python/Boot.hx:299
                        def _hx_local_82(f23,s5):
                            # /home/istvan/packages/haxe/std/python/Boot.hx:299
                            def _hx_local_81(a18):
                                # /home/istvan/packages/haxe/std/python/Boot.hx:299
                                return f23(s5,a18)
                            return _hx_local_81
                        return _hx_local_82(HxString.substr,o)
                    return _hx_local_83()
        else:
            pass
        # /home/istvan/packages/haxe/std/python/Boot.hx:325
        field2 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
        # /home/istvan/packages/haxe/std/python/Boot.hx:326
        if hasattr(o,field2):
            return getattr(o,field2)
        else:
            return None

    @staticmethod
    def getInstanceFields(c):
        # /home/istvan/packages/haxe/std/python/Boot.hx:331
        f = (c._hx_fields if (hasattr(c,"_hx_fields")) else [])
        # /home/istvan/packages/haxe/std/python/Boot.hx:332
        if hasattr(c,"_hx_methods"):
            f = (f + c._hx_methods)
        # /home/istvan/packages/haxe/std/python/Boot.hx:335
        sc = python_Boot.getSuperClass(c)
        # /home/istvan/packages/haxe/std/python/Boot.hx:337
        if (sc is None):
            return f
        else:
            # /home/istvan/packages/haxe/std/python/Boot.hx:341
            scArr = python_Boot.getInstanceFields(sc)
            # /home/istvan/packages/haxe/std/python/Boot.hx:342
            scMap = set(scArr)
            # /home/istvan/packages/haxe/std/python/Boot.hx:345
            # /home/istvan/packages/haxe/std/python/Boot.hx:345
            _g = 0
            while (_g < len(f)):
                f1 = (f[_g] if _g >= 0 and _g < len(f) else None)
                _g = (_g + 1)
                # /home/istvan/packages/haxe/std/python/Boot.hx:346
                if (not (f1 in scMap)):
                    scArr.append(f1)
            # /home/istvan/packages/haxe/std/python/Boot.hx:351
            return scArr

    @staticmethod
    def getSuperClass(c):
        # /home/istvan/packages/haxe/std/python/Boot.hx:356
        if (c is None):
            return None
        # /home/istvan/packages/haxe/std/python/Boot.hx:359
        try:
            # /home/istvan/packages/haxe/std/python/Boot.hx:360
            if hasattr(c,"_hx_super"):
                return c._hx_super
            # /home/istvan/packages/haxe/std/python/Boot.hx:363
            return None
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            pass
        # /home/istvan/packages/haxe/std/python/Boot.hx:367
        return None

    @staticmethod
    def getClassFields(c):
        # /home/istvan/packages/haxe/std/python/Boot.hx:372
        if hasattr(c,"_hx_statics"):
            # /home/istvan/packages/haxe/std/python/Boot.hx:373
            x = c._hx_statics
            # /home/istvan/packages/haxe/std/python/Boot.hx:374
            return list(x)
        else:
            return []

    @staticmethod
    def unhandleKeywords(name):
        # /home/istvan/packages/haxe/std/python/Boot.hx:398
        if (HxString.substr(name,0,python_Boot.prefixLength) == "_hx_"):
            # /home/istvan/packages/haxe/std/python/Boot.hx:399
            real = HxString.substr(name,python_Boot.prefixLength,None)
            # /home/istvan/packages/haxe/std/python/Boot.hx:400
            if (real in python_Boot.keywords):
                return real
        # /home/istvan/packages/haxe/std/python/Boot.hx:402
        return name


class python__KwArgs_KwArgs_Impl_:
    _hx_class_name = "python._KwArgs.KwArgs_Impl_"
    __slots__ = ()
    _hx_statics = ["fromT"]

    @staticmethod
    def fromT(d):
        # /home/istvan/packages/haxe/std/python/KwArgs.hx:57
        this1 = python_Lib.anonAsDict(d)
        return this1


class python_Lib:
    _hx_class_name = "python.Lib"
    __slots__ = ()
    _hx_statics = ["print", "println", "anonToDict", "anonAsDict", "dictAsAnon"]

    @staticmethod
    def print(v):
        # /home/istvan/packages/haxe/std/python/Lib.hx:40
        _hx_str = Std.string(v)
        # /home/istvan/packages/haxe/std/python/Lib.hx:42
        python_lib_Sys.stdout.buffer.write(_hx_str.encode("utf-8", "strict"))
        # /home/istvan/packages/haxe/std/python/Lib.hx:43
        python_lib_Sys.stdout.flush()

    @staticmethod
    def println(v):
        # /home/istvan/packages/haxe/std/python/Lib.hx:50
        _hx_str = Std.string(v)
        # /home/istvan/packages/haxe/std/python/Lib.hx:52
        python_lib_Sys.stdout.buffer.write((("" + ("null" if _hx_str is None else _hx_str)) + "\n").encode("utf-8", "strict"))
        # /home/istvan/packages/haxe/std/python/Lib.hx:53
        python_lib_Sys.stdout.flush()

    @staticmethod
    def anonToDict(o):
        # /home/istvan/packages/haxe/std/python/Lib.hx:69
        if isinstance(o,_hx_AnonObject):
            return o.__dict__.copy()
        else:
            return None

    @staticmethod
    def anonAsDict(o):
        # /home/istvan/packages/haxe/std/python/Lib.hx:83
        if isinstance(o,_hx_AnonObject):
            return o.__dict__
        else:
            return None

    @staticmethod
    def dictAsAnon(d):
        # /home/istvan/packages/haxe/std/python/Lib.hx:95
        return _hx_AnonObject(d)


class python_internal_ArrayImpl:
    _hx_class_name = "python.internal.ArrayImpl"
    __slots__ = ()
    _hx_statics = ["concat", "iterator", "indexOf", "lastIndexOf", "toString", "pop", "push", "unshift", "remove", "shift", "slice", "sort", "splice", "map", "filter", "insert", "reverse", "_get"]

    @staticmethod
    def concat(a1,a2):
        # /home/istvan/packages/haxe/std/python/internal/ArrayImpl.hx:35
        return (a1 + a2)

    @staticmethod
    def iterator(x):
        # /home/istvan/packages/haxe/std/python/internal/ArrayImpl.hx:45
        return python_HaxeIterator(x.__iter__())

    @staticmethod
    def indexOf(a,x,fromIndex = None):
        # /home/istvan/packages/haxe/std/python/internal/ArrayImpl.hx:50
        _hx_len = len(a)
        # /home/istvan/packages/haxe/std/python/internal/ArrayImpl.hx:51
        l = (0 if ((fromIndex is None)) else ((_hx_len + fromIndex) if ((fromIndex < 0)) else fromIndex))
        # /home/istvan/packages/haxe/std/python/internal/ArrayImpl.hx:55
        if (l < 0):
            l = 0
        # /home/istvan/packages/haxe/std/python/internal/ArrayImpl.hx:56
        # /home/istvan/packages/haxe/std/python/internal/ArrayImpl.hx:56
        _g1 = l
        _g = _hx_len
        while (_g1 < _g):
            i = _g1
            _g1 = (_g1 + 1)
            # /home/istvan/packages/haxe/std/python/internal/ArrayImpl.hx:57
            if (a[i] == x):
                return i
        # /home/istvan/packages/haxe/std/python/internal/ArrayImpl.hx:59
        return -1

    @staticmethod
    def lastIndexOf(a,x,fromIndex = None):
        # /home/istvan/packages/haxe/std/python/internal/ArrayImpl.hx:64
        _hx_len = len(a)
        # /home/istvan/packages/haxe/std/python/internal/ArrayImpl.hx:65
        l = (_hx_len if ((fromIndex is None)) else (((_hx_len + fromIndex) + 1) if ((fromIndex < 0)) else (fromIndex + 1)))
        # /home/istvan/packages/haxe/std/python/internal/ArrayImpl.hx:69
        if (l > _hx_len):
            l = _hx_len
        # /home/istvan/packages/haxe/std/python/internal/ArrayImpl.hx:70
        while True:
            # /home/istvan/packages/haxe/std/python/internal/ArrayImpl.hx:70
            l = (l - 1)
            tmp = l
            if (tmp <= -1):
                break
            # /home/istvan/packages/haxe/std/python/internal/ArrayImpl.hx:71
            if (a[l] == x):
                return l
        # /home/istvan/packages/haxe/std/python/internal/ArrayImpl.hx:73
        return -1

    @staticmethod
    def toString(x):
        # /home/istvan/packages/haxe/std/python/internal/ArrayImpl.hx:84
        return (("[" + HxOverrides.stringOrNull(",".join([python_Boot.toString1(x1,'') for x1 in x]))) + "]")

    @staticmethod
    def pop(x):
        # /home/istvan/packages/haxe/std/python/internal/ArrayImpl.hx:89
        if (len(x) == 0):
            return None
        else:
            return x.pop()

    @staticmethod
    def push(x,e):
        # /home/istvan/packages/haxe/std/python/internal/ArrayImpl.hx:94
        x.append(e)
        # /home/istvan/packages/haxe/std/python/internal/ArrayImpl.hx:95
        return len(x)

    @staticmethod
    def unshift(x,e):
        # /home/istvan/packages/haxe/std/python/internal/ArrayImpl.hx:100
        x.insert(0, e)

    @staticmethod
    def remove(x,e):
        # /home/istvan/packages/haxe/std/python/internal/ArrayImpl.hx:105
        try:
            # /home/istvan/packages/haxe/std/python/internal/ArrayImpl.hx:106
            x.remove(e)
            # /home/istvan/packages/haxe/std/python/internal/ArrayImpl.hx:107
            return True
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            e1 = _hx_e1
            return False

    @staticmethod
    def shift(x):
        # /home/istvan/packages/haxe/std/python/internal/ArrayImpl.hx:115
        if (len(x) == 0):
            return None
        # /home/istvan/packages/haxe/std/python/internal/ArrayImpl.hx:116
        return x.pop(0)

    @staticmethod
    def slice(x,pos,end = None):
        # /home/istvan/packages/haxe/std/python/internal/ArrayImpl.hx:121
        return x[pos:end]

    @staticmethod
    def sort(x,f):
        # /home/istvan/packages/haxe/std/python/internal/ArrayImpl.hx:125
        x.sort(key= python_lib_Functools.cmp_to_key(f))

    @staticmethod
    def splice(x,pos,_hx_len):
        # /home/istvan/packages/haxe/std/python/internal/ArrayImpl.hx:130
        if (pos < 0):
            pos = (len(x) + pos)
        # /home/istvan/packages/haxe/std/python/internal/ArrayImpl.hx:131
        if (pos < 0):
            pos = 0
        # /home/istvan/packages/haxe/std/python/internal/ArrayImpl.hx:132
        res = x[pos:(pos + _hx_len)]
        # /home/istvan/packages/haxe/std/python/internal/ArrayImpl.hx:133
        del x[pos:(pos + _hx_len)]
        # /home/istvan/packages/haxe/std/python/internal/ArrayImpl.hx:134
        return res

    @staticmethod
    def map(x,f):
        # /home/istvan/packages/haxe/std/python/internal/ArrayImpl.hx:139
        return list(map(f,x))

    @staticmethod
    def filter(x,f):
        # /home/istvan/packages/haxe/std/python/internal/ArrayImpl.hx:144
        return list(filter(f,x))

    @staticmethod
    def insert(a,pos,x):
        # /home/istvan/packages/haxe/std/python/internal/ArrayImpl.hx:149
        a.insert(pos, x)

    @staticmethod
    def reverse(a):
        # /home/istvan/packages/haxe/std/python/internal/ArrayImpl.hx:153
        a.reverse()

    @staticmethod
    def _get(x,idx):
        # /home/istvan/packages/haxe/std/python/internal/ArrayImpl.hx:158
        if ((idx > -1) and ((idx < len(x)))):
            return x[idx]
        else:
            return None


class _HxException(Exception):
    _hx_class_name = "_HxException"
    __slots__ = ("val",)
    _hx_fields = ["val"]
    _hx_methods = []
    _hx_statics = []
    _hx_super = Exception


    def __init__(self,val):
        # /home/istvan/packages/haxe/std/python/internal/HxException.hx:28
        self.val = None
        # /home/istvan/packages/haxe/std/python/internal/HxException.hx:31
        message = str(val)
        # /home/istvan/packages/haxe/std/python/internal/HxException.hx:32
        super().__init__(message)
        # /home/istvan/packages/haxe/std/python/internal/HxException.hx:33
        self.val = val



class HxOverrides:
    _hx_class_name = "HxOverrides"
    __slots__ = ()
    _hx_statics = ["eq", "stringOrNull", "mapKwArgs"]

    @staticmethod
    def eq(a,b):
        # /home/istvan/packages/haxe/std/python/internal/HxOverrides.hx:46
        if (isinstance(a,list) or isinstance(b,list)):
            return a is b
        # /home/istvan/packages/haxe/std/python/internal/HxOverrides.hx:49
        return (a == b)

    @staticmethod
    def stringOrNull(s):
        # /home/istvan/packages/haxe/std/python/internal/HxOverrides.hx:53
        if (s is None):
            return "null"
        else:
            return s

    @staticmethod
    def mapKwArgs(a,v):
        # /home/istvan/packages/haxe/std/python/internal/HxOverrides.hx:156
        a1 = python_Lib.dictAsAnon(python_Lib.anonToDict(a))
        # /home/istvan/packages/haxe/std/python/internal/HxOverrides.hx:157
        # /home/istvan/packages/haxe/std/python/internal/HxOverrides.hx:157
        k = python_HaxeIterator(iter(v.keys()))
        while k.hasNext():
            k1 = k.next()
            # /home/istvan/packages/haxe/std/python/internal/HxOverrides.hx:158
            val = v.get(k1)
            # /home/istvan/packages/haxe/std/python/internal/HxOverrides.hx:159
            if hasattr(a1,k1):
                # /home/istvan/packages/haxe/std/python/internal/HxOverrides.hx:160
                x = getattr(a1,k1)
                # /home/istvan/packages/haxe/std/python/internal/HxOverrides.hx:161
                setattr(a1,val,x)
                # /home/istvan/packages/haxe/std/python/internal/HxOverrides.hx:162
                delattr(a1,k1)
        # /home/istvan/packages/haxe/std/python/internal/HxOverrides.hx:165
        return a1


class HxString:
    _hx_class_name = "HxString"
    __slots__ = ()
    _hx_statics = ["split", "charCodeAt", "charAt", "lastIndexOf", "toUpperCase", "toLowerCase", "indexOf", "toString", "substring", "substr"]

    @staticmethod
    def split(s,d):
        # /home/istvan/packages/haxe/std/python/internal/StringImpl.hx:31
        if (d == ""):
            return list(s)
        else:
            return s.split(d)

    @staticmethod
    def charCodeAt(s,index):
        # /home/istvan/packages/haxe/std/python/internal/StringImpl.hx:37
        if ((((s is None) or ((len(s) == 0))) or ((index < 0))) or ((index >= len(s)))):
            return None
        else:
            return ord(s[index])

    @staticmethod
    def charAt(s,index):
        # /home/istvan/packages/haxe/std/python/internal/StringImpl.hx:43
        if ((index < 0) or ((index >= len(s)))):
            return ""
        else:
            return s[index]

    @staticmethod
    def lastIndexOf(s,_hx_str,startIndex = None):
        # /home/istvan/packages/haxe/std/python/internal/StringImpl.hx:48
        if (startIndex is None):
            return s.rfind(_hx_str, 0, len(s))
        else:
            # /home/istvan/packages/haxe/std/python/internal/StringImpl.hx:52
            i = s.rfind(_hx_str, 0, (startIndex + 1))
            # /home/istvan/packages/haxe/std/python/internal/StringImpl.hx:53
            startLeft = (max(0,((startIndex + 1) - len(_hx_str))) if ((i == -1)) else (i + 1))
            # /home/istvan/packages/haxe/std/python/internal/StringImpl.hx:54
            check = s.find(_hx_str, startLeft, len(s))
            # /home/istvan/packages/haxe/std/python/internal/StringImpl.hx:55
            if ((check > i) and ((check <= startIndex))):
                return check
            else:
                return i

    @staticmethod
    def toUpperCase(s):
        # /home/istvan/packages/haxe/std/python/internal/StringImpl.hx:66
        return s.upper()

    @staticmethod
    def toLowerCase(s):
        # /home/istvan/packages/haxe/std/python/internal/StringImpl.hx:70
        return s.lower()

    @staticmethod
    def indexOf(s,_hx_str,startIndex = None):
        # /home/istvan/packages/haxe/std/python/internal/StringImpl.hx:74
        if (startIndex is None):
            return s.find(_hx_str)
        else:
            return s.find(_hx_str, startIndex)

    @staticmethod
    def toString(s):
        # /home/istvan/packages/haxe/std/python/internal/StringImpl.hx:81
        return s

    @staticmethod
    def substring(s,startIndex,endIndex = None):
        # /home/istvan/packages/haxe/std/python/internal/StringImpl.hx:97
        if (startIndex < 0):
            startIndex = 0
        # /home/istvan/packages/haxe/std/python/internal/StringImpl.hx:98
        if (endIndex is None):
            return s[startIndex:]
        else:
            # /home/istvan/packages/haxe/std/python/internal/StringImpl.hx:101
            if (endIndex < 0):
                endIndex = 0
            # /home/istvan/packages/haxe/std/python/internal/StringImpl.hx:102
            if (endIndex < startIndex):
                return s[endIndex:startIndex]
            else:
                return s[startIndex:endIndex]

    @staticmethod
    def substr(s,startIndex,_hx_len = None):
        # /home/istvan/packages/haxe/std/python/internal/StringImpl.hx:113
        if (_hx_len is None):
            return s[startIndex:]
        else:
            # /home/istvan/packages/haxe/std/python/internal/StringImpl.hx:116
            if (_hx_len == 0):
                return ""
            # /home/istvan/packages/haxe/std/python/internal/StringImpl.hx:117
            return s[startIndex:(startIndex + _hx_len)]


class python_io_NativeInput(haxe_io_Input):
    _hx_class_name = "python.io.NativeInput"
    __slots__ = ("stream", "wasEof")
    _hx_fields = ["stream", "wasEof"]
    _hx_methods = ["throwEof", "readinto", "readBytes"]
    _hx_statics = []
    _hx_super = haxe_io_Input


    def __init__(self,s):
        # /home/istvan/packages/haxe/std/python/io/NativeInput.hx:33
        self.wasEof = None
        # /home/istvan/packages/haxe/std/python/io/NativeInput.hx:36
        self.stream = s
        # /home/istvan/packages/haxe/std/python/io/NativeInput.hx:37
        self.set_bigEndian(False)
        # /home/istvan/packages/haxe/std/python/io/NativeInput.hx:38
        self.wasEof = False
        # /home/istvan/packages/haxe/std/python/io/NativeInput.hx:39
        if (not self.stream.readable()):
            raise _HxException("Write-only stream")

    def throwEof(self):
        # /home/istvan/packages/haxe/std/python/io/NativeInput.hx:56
        self.wasEof = True
        # /home/istvan/packages/haxe/std/python/io/NativeInput.hx:57
        raise _HxException(haxe_io_Eof())

    def readinto(self,b):
        # /home/istvan/packages/haxe/std/python/io/NativeInput.hx:65
        raise _HxException("abstract method, should be overriden")

    def readBytes(self,s,pos,_hx_len):
        # /home/istvan/packages/haxe/std/python/io/NativeInput.hx:73
        if (((pos < 0) or ((_hx_len < 0))) or (((pos + _hx_len) > s.length))):
            raise _HxException(haxe_io_Error.OutsideBounds)
        # /home/istvan/packages/haxe/std/python/io/NativeInput.hx:76
        ba = bytearray(_hx_len)
        # /home/istvan/packages/haxe/std/python/io/NativeInput.hx:77
        ret = self.readinto(ba)
        # /home/istvan/packages/haxe/std/python/io/NativeInput.hx:78
        if (ret == 0):
            self.throwEof()
        # /home/istvan/packages/haxe/std/python/io/NativeInput.hx:80
        s.blit(pos,haxe_io_Bytes.ofData(ba),0,_hx_len)
        # /home/istvan/packages/haxe/std/python/io/NativeInput.hx:81
        return ret



class python_io_IInput:
    _hx_class_name = "python.io.IInput"
    __slots__ = ()
    _hx_methods = ["set_bigEndian", "readByte", "readBytes", "readAll"]


class python_io_IFileInput:
    _hx_class_name = "python.io.IFileInput"
    __slots__ = ()


class python_io_NativeOutput(haxe_io_Output):
    _hx_class_name = "python.io.NativeOutput"
    __slots__ = ("stream",)
    _hx_fields = ["stream"]
    _hx_methods = []
    _hx_statics = []
    _hx_super = haxe_io_Output


    def __init__(self,stream):
        # /home/istvan/packages/haxe/std/python/io/NativeOutput.hx:31
        self.stream = None
        # /home/istvan/packages/haxe/std/python/io/NativeOutput.hx:37
        self.set_bigEndian(False)
        # /home/istvan/packages/haxe/std/python/io/NativeOutput.hx:38
        self.stream = stream
        # /home/istvan/packages/haxe/std/python/io/NativeOutput.hx:39
        if (not stream.writable()):
            raise _HxException("Read only stream")



class python_io_IOutput:
    _hx_class_name = "python.io.IOutput"
    __slots__ = ()
    _hx_methods = ["set_bigEndian"]


class python_io_IFileOutput:
    _hx_class_name = "python.io.IFileOutput"
    __slots__ = ()


class python_io_NativeTextInput(python_io_NativeInput):
    _hx_class_name = "python.io.NativeTextInput"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = ["readByte", "readinto"]
    _hx_statics = []
    _hx_super = python_io_NativeInput


    def __init__(self,stream):
        # /home/istvan/packages/haxe/std/python/io/NativeTextInput.hx:39
        super().__init__(stream)

    def readByte(self):
        # /home/istvan/packages/haxe/std/python/io/NativeTextInput.hx:44
        ret = self.stream.read(1)
        # /home/istvan/packages/haxe/std/python/io/NativeTextInput.hx:46
        if (len(ret) == 0):
            self.throwEof()
        # /home/istvan/packages/haxe/std/python/io/NativeTextInput.hx:48
        return HxString.charCodeAt(ret,0)

    def readinto(self,b):
        # /home/istvan/packages/haxe/std/python/io/NativeTextInput.hx:58
        return self.stream.buffer.readinto(b)



class python_io_FileTextInput(python_io_NativeTextInput):
    _hx_class_name = "python.io.FileTextInput"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = []
    _hx_statics = []
    _hx_super = python_io_NativeTextInput


    def __init__(self,stream):
        # /home/istvan/packages/haxe/std/python/io/FileTextInput.hx:32
        super().__init__(stream)


class python_io_NativeTextOutput(python_io_NativeOutput):
    _hx_class_name = "python.io.NativeTextOutput"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = []
    _hx_statics = []
    _hx_super = python_io_NativeOutput


    def __init__(self,stream):
        # /home/istvan/packages/haxe/std/python/io/NativeTextOutput.hx:34
        super().__init__(stream)
        # /home/istvan/packages/haxe/std/python/io/NativeTextOutput.hx:35
        if (not stream.writable()):
            raise _HxException("Read only stream")


class python_io_FileTextOutput(python_io_NativeTextOutput):
    _hx_class_name = "python.io.FileTextOutput"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = []
    _hx_statics = []
    _hx_super = python_io_NativeTextOutput


    def __init__(self,stream):
        # /home/istvan/packages/haxe/std/python/io/FileTextOutput.hx:30
        super().__init__(stream)


class python_io_IoTools:
    _hx_class_name = "python.io.IoTools"
    __slots__ = ()
    _hx_statics = ["createFileInputFromText", "createFileOutputFromText"]

    @staticmethod
    def createFileInputFromText(t):
        # /home/istvan/packages/haxe/std/python/io/IoTools.hx:39
        return sys_io_FileInput(python_io_FileTextInput(t))

    @staticmethod
    def createFileOutputFromText(t):
        # /home/istvan/packages/haxe/std/python/io/IoTools.hx:47
        return sys_io_FileOutput(python_io_FileTextOutput(t))


class sys_io_FileInput(haxe_io_Input):
    _hx_class_name = "sys.io.FileInput"
    __slots__ = ("impl",)
    _hx_fields = ["impl"]
    _hx_methods = ["set_bigEndian", "readByte", "readBytes", "readAll"]
    _hx_statics = []
    _hx_super = haxe_io_Input


    def __init__(self,impl):
        # /home/istvan/packages/haxe/std/python/_std/sys/io/FileInput.hx:37
        self.impl = impl

    def set_bigEndian(self,b):
        # /home/istvan/packages/haxe/std/python/_std/sys/io/FileInput.hx:41
        return self.impl.set_bigEndian(b)

    def readByte(self):
        # /home/istvan/packages/haxe/std/python/_std/sys/io/FileInput.hx:55
        return self.impl.readByte()

    def readBytes(self,s,pos,_hx_len):
        # /home/istvan/packages/haxe/std/python/_std/sys/io/FileInput.hx:59
        return self.impl.readBytes(s,pos,_hx_len)

    def readAll(self,bufsize = None):
        # /home/istvan/packages/haxe/std/python/_std/sys/io/FileInput.hx:67
        return self.impl.readAll(bufsize)



class sys_io_FileOutput(haxe_io_Output):
    _hx_class_name = "sys.io.FileOutput"
    __slots__ = ("impl",)
    _hx_fields = ["impl"]
    _hx_methods = ["set_bigEndian"]
    _hx_statics = []
    _hx_super = haxe_io_Output


    def __init__(self,impl):
        # /home/istvan/packages/haxe/std/python/_std/sys/io/FileOutput.hx:34
        self.impl = impl

    def set_bigEndian(self,b):
        # /home/istvan/packages/haxe/std/python/_std/sys/io/FileOutput.hx:46
        return self.impl.set_bigEndian(b)



class sys_io_Process:
    _hx_class_name = "sys.io.Process"
    __slots__ = ("stdout", "stderr", "stdin", "p")
    _hx_fields = ["stdout", "stderr", "stdin", "p"]
    _hx_methods = ["exitCode"]

    def __init__(self,cmd,args = None):
        # /home/istvan/packages/haxe/std/python/_std/sys/io/Process.hx:35
        self.stdin = None
        # /home/istvan/packages/haxe/std/python/_std/sys/io/Process.hx:34
        self.stderr = None
        # /home/istvan/packages/haxe/std/python/_std/sys/io/Process.hx:33
        self.stdout = None
        # /home/istvan/packages/haxe/std/python/_std/sys/io/Process.hx:40
        args1 = (cmd if ((args is None)) else ([cmd] + args))
        o = _hx_AnonObject({'shell': (args is None), 'stdin': python_lib_Subprocess.PIPE, 'stdout': python_lib_Subprocess.PIPE, 'stderr': python_lib_Subprocess.PIPE})
        Reflect.setField(o,"bufsize",(Reflect.field(o,"bufsize") if (hasattr(o,(("_hx_" + "bufsize") if (("bufsize" in python_Boot.keywords)) else (("_hx_" + "bufsize") if (((((len("bufsize") > 2) and ((ord("bufsize"[0]) == 95))) and ((ord("bufsize"[1]) == 95))) and ((ord("bufsize"[(len("bufsize") - 1)]) != 95)))) else "bufsize")))) else 0))
        Reflect.setField(o,"executable",(Reflect.field(o,"executable") if (hasattr(o,(("_hx_" + "executable") if (("executable" in python_Boot.keywords)) else (("_hx_" + "executable") if (((((len("executable") > 2) and ((ord("executable"[0]) == 95))) and ((ord("executable"[1]) == 95))) and ((ord("executable"[(len("executable") - 1)]) != 95)))) else "executable")))) else None))
        Reflect.setField(o,"stdin",(Reflect.field(o,"stdin") if (hasattr(o,(("_hx_" + "stdin") if (("stdin" in python_Boot.keywords)) else (("_hx_" + "stdin") if (((((len("stdin") > 2) and ((ord("stdin"[0]) == 95))) and ((ord("stdin"[1]) == 95))) and ((ord("stdin"[(len("stdin") - 1)]) != 95)))) else "stdin")))) else None))
        Reflect.setField(o,"stdout",(Reflect.field(o,"stdout") if (hasattr(o,(("_hx_" + "stdout") if (("stdout" in python_Boot.keywords)) else (("_hx_" + "stdout") if (((((len("stdout") > 2) and ((ord("stdout"[0]) == 95))) and ((ord("stdout"[1]) == 95))) and ((ord("stdout"[(len("stdout") - 1)]) != 95)))) else "stdout")))) else None))
        Reflect.setField(o,"stderr",(Reflect.field(o,"stderr") if (hasattr(o,(("_hx_" + "stderr") if (("stderr" in python_Boot.keywords)) else (("_hx_" + "stderr") if (((((len("stderr") > 2) and ((ord("stderr"[0]) == 95))) and ((ord("stderr"[1]) == 95))) and ((ord("stderr"[(len("stderr") - 1)]) != 95)))) else "stderr")))) else None))
        Reflect.setField(o,"preexec_fn",(Reflect.field(o,"preexec_fn") if (hasattr(o,(("_hx_" + "preexec_fn") if (("preexec_fn" in python_Boot.keywords)) else (("_hx_" + "preexec_fn") if (((((len("preexec_fn") > 2) and ((ord("preexec_fn"[0]) == 95))) and ((ord("preexec_fn"[1]) == 95))) and ((ord("preexec_fn"[(len("preexec_fn") - 1)]) != 95)))) else "preexec_fn")))) else None))
        Reflect.setField(o,"close_fds",(Reflect.field(o,"close_fds") if (hasattr(o,(("_hx_" + "close_fds") if (("close_fds" in python_Boot.keywords)) else (("_hx_" + "close_fds") if (((((len("close_fds") > 2) and ((ord("close_fds"[0]) == 95))) and ((ord("close_fds"[1]) == 95))) and ((ord("close_fds"[(len("close_fds") - 1)]) != 95)))) else "close_fds")))) else None))
        Reflect.setField(o,"shell",(Reflect.field(o,"shell") if (hasattr(o,(("_hx_" + "shell") if (("shell" in python_Boot.keywords)) else (("_hx_" + "shell") if (((((len("shell") > 2) and ((ord("shell"[0]) == 95))) and ((ord("shell"[1]) == 95))) and ((ord("shell"[(len("shell") - 1)]) != 95)))) else "shell")))) else None))
        Reflect.setField(o,"cwd",(Reflect.field(o,"cwd") if (hasattr(o,(("_hx_" + "cwd") if (("cwd" in python_Boot.keywords)) else (("_hx_" + "cwd") if (((((len("cwd") > 2) and ((ord("cwd"[0]) == 95))) and ((ord("cwd"[1]) == 95))) and ((ord("cwd"[(len("cwd") - 1)]) != 95)))) else "cwd")))) else None))
        Reflect.setField(o,"env",(Reflect.field(o,"env") if (hasattr(o,(("_hx_" + "env") if (("env" in python_Boot.keywords)) else (("_hx_" + "env") if (((((len("env") > 2) and ((ord("env"[0]) == 95))) and ((ord("env"[1]) == 95))) and ((ord("env"[(len("env") - 1)]) != 95)))) else "env")))) else None))
        Reflect.setField(o,"universal_newlines",(Reflect.field(o,"universal_newlines") if (hasattr(o,(("_hx_" + "universal_newlines") if (("universal_newlines" in python_Boot.keywords)) else (("_hx_" + "universal_newlines") if (((((len("universal_newlines") > 2) and ((ord("universal_newlines"[0]) == 95))) and ((ord("universal_newlines"[1]) == 95))) and ((ord("universal_newlines"[(len("universal_newlines") - 1)]) != 95)))) else "universal_newlines")))) else None))
        Reflect.setField(o,"startupinfo",(Reflect.field(o,"startupinfo") if (hasattr(o,(("_hx_" + "startupinfo") if (("startupinfo" in python_Boot.keywords)) else (("_hx_" + "startupinfo") if (((((len("startupinfo") > 2) and ((ord("startupinfo"[0]) == 95))) and ((ord("startupinfo"[1]) == 95))) and ((ord("startupinfo"[(len("startupinfo") - 1)]) != 95)))) else "startupinfo")))) else None))
        Reflect.setField(o,"creationflags",(Reflect.field(o,"creationflags") if (hasattr(o,(("_hx_" + "creationflags") if (("creationflags" in python_Boot.keywords)) else (("_hx_" + "creationflags") if (((((len("creationflags") > 2) and ((ord("creationflags"[0]) == 95))) and ((ord("creationflags"[1]) == 95))) and ((ord("creationflags"[(len("creationflags") - 1)]) != 95)))) else "creationflags")))) else 0))
        self.p = (python_lib_subprocess_Popen(args1,Reflect.field(o,"bufsize"),Reflect.field(o,"executable"),Reflect.field(o,"stdin"),Reflect.field(o,"stdout"),Reflect.field(o,"stderr"),Reflect.field(o,"preexec_fn"),Reflect.field(o,"close_fds"),Reflect.field(o,"shell"),Reflect.field(o,"cwd"),Reflect.field(o,"env"),Reflect.field(o,"universal_newlines"),Reflect.field(o,"startupinfo"),Reflect.field(o,"creationflags")) if ((Sys.systemName() == "Windows")) else python_lib_subprocess_Popen(args1,Reflect.field(o,"bufsize"),Reflect.field(o,"executable"),Reflect.field(o,"stdin"),Reflect.field(o,"stdout"),Reflect.field(o,"stderr"),Reflect.field(o,"preexec_fn"),Reflect.field(o,"close_fds"),Reflect.field(o,"shell"),Reflect.field(o,"cwd"),Reflect.field(o,"env"),Reflect.field(o,"universal_newlines"),Reflect.field(o,"startupinfo")))
        # /home/istvan/packages/haxe/std/python/_std/sys/io/Process.hx:41
        self.stdout = python_io_IoTools.createFileInputFromText(python_lib_io_TextIOWrapper(python_lib_io_BufferedReader(self.p.stdout)))
        # /home/istvan/packages/haxe/std/python/_std/sys/io/Process.hx:42
        self.stderr = python_io_IoTools.createFileInputFromText(python_lib_io_TextIOWrapper(python_lib_io_BufferedReader(self.p.stderr)))
        # /home/istvan/packages/haxe/std/python/_std/sys/io/Process.hx:43
        self.stdin = python_io_IoTools.createFileOutputFromText(python_lib_io_TextIOWrapper(python_lib_io_BufferedWriter(self.p.stdin)))

    def exitCode(self,block = True):
        # /home/istvan/packages/haxe/std/python/_std/sys/io/Process.hx:49
        if (block is None):
            block = True
        # /home/istvan/packages/haxe/std/python/_std/sys/io/Process.hx:50
        if (block == False):
            return self.p.poll()
        # /home/istvan/packages/haxe/std/python/_std/sys/io/Process.hx:52
        return self.p.wait()


# /home/istvan/packages/haxe/std/python/_std/Math.hx:135
Math.NEGATIVE_INFINITY = float("-inf")
# /home/istvan/packages/haxe/std/python/_std/Math.hx:136
Math.POSITIVE_INFINITY = float("inf")
# /home/istvan/packages/haxe/std/python/_std/Math.hx:137
Math.NaN = float("nan")
# /home/istvan/packages/haxe/std/python/_std/Math.hx:138
Math.PI = python_lib_Math.pi

def _hx_init_Sys_environ():
    # /home/istvan/packages/haxe/std/python/_std/Sys.hx:30
    def _hx_local_0():
        # /home/istvan/packages/haxe/std/python/_std/Sys.hx:31
        Sys.environ = haxe_ds_StringMap()
        # /home/istvan/packages/haxe/std/python/_std/Sys.hx:33
        env = python_lib_Os.environ
        # /home/istvan/packages/haxe/std/python/_std/Sys.hx:35
        # /home/istvan/packages/haxe/std/python/_std/Sys.hx:35
        key = python_HaxeIterator(iter(env.keys()))
        while key.hasNext():
            key1 = key.next()
            # /home/istvan/packages/haxe/std/python/_std/Sys.hx:36
            # /home/istvan/packages/haxe/std/python/_std/Sys.hx:36
            _this = Sys.environ
            value = env.get(key1,None)
            _this.h[key1] = value
        # /home/istvan/packages/haxe/std/python/_std/Sys.hx:38
        return Sys.environ
    return _hx_local_0()
Sys.environ = _hx_init_Sys_environ()
Sys._programPath = sys_FileSystem.fullPath(python_lib_Inspect.getsourcefile(Sys))
def _hx_init_gamma_Common_versions():
    # src/gamma/Common.hx:55
    def _hx_local_0():
        # src/gamma/Common.hx:55
        _g = haxe_ds_StringMap()
        _g.h["20181130"] = "/home/istvan/progs/GAMMA_SOFTWARE-20181130"
        return _g
    return _hx_local_0()
gamma_Common.versions = _hx_init_gamma_Common_versions()
gamma_Common.settings = gamma__Common_Settings("bmp",gamma_Common.versions.h.get("20181130",None),["DIFF", "DISP", "ISP", "LAT", "IPTA"],"/home/istvan/miniconda3/lib:",gamma__Common_Templates("{date}_iw{iw}.{pol}.slc","%Y%m%d","%Y%m%dT%H%M%S","{date}.{pol}.SLC_tab"),"/mnt/bozso_i/cache")
def _hx_init_gamma_Common_gamma_commands():
    # src/gamma/Common.hx:72
    def _hx_local_0():
        # src/gamma/Common.hx:72
        _g = []
        # src/gamma/Common.hx:73
        # src/gamma/Common.hx:73
        _g1 = 0
        _g2 = gamma_Common.settings.modules
        while (_g1 < len(_g2)):
            module = (_g2[_g1] if _g1 >= 0 and _g1 < len(_g2) else None)
            _g1 = (_g1 + 1)
            # src/gamma/Common.hx:74
            # src/gamma/Common.hx:74
            _g3 = 0
            _g4 = ["bin", "scripts"]
            while (_g3 < len(_g4)):
                path = (_g4[_g3] if _g3 >= 0 and _g3 < len(_g4) else None)
                _g3 = (_g3 + 1)
                # src/gamma/Common.hx:75
                # src/gamma/Common.hx:75
                binfile = python_HaxeIterator(python_lib_Glob.iglob(python_lib_os_Path.join(gamma_Common.settings.path,module,path,"*")))
                while binfile.hasNext():
                    binfile1 = binfile.next()
                    # src/gamma/Common.hx:76
                    _g.append(binfile1)
        # src/gamma/Common.hx:72
        return _g
    return _hx_local_0()
gamma_Common.gamma_commands = _hx_init_gamma_Common_gamma_commands()
python_Boot.keywords = set(["and", "del", "from", "not", "with", "as", "elif", "global", "or", "yield", "assert", "else", "if", "pass", "None", "break", "except", "import", "raise", "True", "class", "exec", "in", "return", "False", "continue", "finally", "is", "try", "def", "for", "lambda", "while"])
python_Boot.prefixLength = len("_hx_")

Main.main()